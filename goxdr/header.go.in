// -*-Go-*-

// Don't edit header.go, edit header.go.in.  header.go is
// autogenerated from header.go.in by uncommenting the line marked
// UNCOMMENT.  (The comment makes is easier to edit the contents of
// the header string as go source code in a syntax-aware editor.)

package main

//UNCOMMENT:var header string = `
// begin boilerplate

import "fmt"
import "math"

type XdrError string
func (v XdrError) Error() string { return string(v) }
func xdrPanic(s string, args ...interface{}) {
	panic(XdrError(fmt.Sprintf(s, args...)))
}

type XDR interface {
	marshal(name string, ptr interface{})
}

const (
	TRUE = true
	FALSE = false
)

type XdrVoid = struct{}

type XdrNum32 interface {
	GetU32() uint32
	SetU32(uint32)
	XdrPointer() interface{}
	XdrValue() interface{}
}

type xdrtype_bool bool
func (v *xdrtype_bool) GetU32() uint32 {
	if *v {
		return 1
	}
	return 0
}
func (v *xdrtype_bool) SetU32(nv uint32) {
	switch nv {
	case 0:
		*v = false
	case 1:
		*v = true
	}
	xdrPanic("bool must be 0 or 1")
}
func (v *xdrtype_bool) XdrPointer() interface{} { return (*bool)(v) }
func (v *xdrtype_bool) XdrValue() interface{} { return bool(*v) }
func xdrconvert_bool(v *bool) XdrNum32 { return (*xdrtype_bool)(v) }

type xdrtype_int32 int32
func (v *xdrtype_int32) GetU32() uint32 { return uint32(*v) }
func (v *xdrtype_int32) SetU32(nv uint32) { *v = xdrtype_int32(nv) }
func (v *xdrtype_int32) XdrPointer() interface{} { return (*int32)(v) }
func (v *xdrtype_int32) XdrValue() interface{} { return int32(*v) }
func xdrconvert_int32(v *int32) XdrNum32 { return (*xdrtype_int32)(v) }

type xdrtype_uint32 uint32
func (v *xdrtype_uint32) GetU32() uint32 { return uint32(*v) }
func (v *xdrtype_uint32) SetU32(nv uint32) { *v = xdrtype_uint32(nv) }
func (v *xdrtype_uint32) XdrPointer() interface{} { return (*uint32)(v) }
func (v *xdrtype_uint32) XdrValue() interface{} { return uint32(*v) }
func xdrconvert_uint32(v *uint32) XdrNum32 { return (*xdrtype_uint32)(v) }

type xdrtype_float32 float32
func (v *xdrtype_float32) GetU32() uint32 {
	return math.Float32bits(float32(*v))
}
func (v *xdrtype_float32) SetU32(nv uint32) {
	*v = xdrtype_float32(math.Float32frombits(nv))
}
func (v *xdrtype_float32) XdrPointer() interface{} { return (*float32)(v) }
func (v *xdrtype_float32) XdrValue() interface{} { return float32(*v) }
func xdrconvert_float32(v *float32) XdrNum32 { return (*xdrtype_float32)(v) }

type XdrNum64 interface {
	GetU64() uint64
	SetU64(uint64)
	XdrPointer() interface{}
	XdrValue() interface{}
}

type xdrtype_int64 int64
func (v *xdrtype_int64) GetU64() uint64 { return uint64(*v) }
func (v *xdrtype_int64) SetU64(nv uint64) { *v = xdrtype_int64(nv) }
func (v *xdrtype_int64) XdrPointer() interface{} { return (*int64)(v) }
func (v *xdrtype_int64) XdrValue() interface{} { return int64(*v) }
func xdrconvert_int64(v *int64) XdrNum64 { return (*xdrtype_int64)(v) }

type xdrtype_uint64 uint64
func (v *xdrtype_uint64) GetU64() uint64 { return uint64(*v) }
func (v *xdrtype_uint64) SetU64(nv uint64) { *v = xdrtype_uint64(nv) }
func (v *xdrtype_uint64) XdrPointer() interface{} { return (*uint64)(v) }
func (v *xdrtype_uint64) XdrValue() interface{} { return uint64(*v) }
func xdrconvert_uint64(v *uint64) XdrNum64 { return (*xdrtype_uint64)(v) }

type xdrtype_float64 float64
func (v *xdrtype_float64) GetU64() uint64 {
	return math.Float64bits(float64(*v))
}
func (v *xdrtype_float64) SetU64(nv uint64) {
	*v = xdrtype_float64(math.Float64frombits(nv))
}
func (v *xdrtype_float64) XdrPointer() interface{} { return (*float64)(v) }
func (v *xdrtype_float64) XdrValue() interface{} { return float64(*v) }
func xdrconvert_float64(v *float64) XdrNum64 { return (*xdrtype_float64)(v) }

type XdrBytes interface {
	GetByteSlice() []byte
}
type XdrVariableBytes interface {
	XdrBytes
	XdrBound() uint32
	SetByteSlice([]byte)
	XdrPointer() interface{}
	XdrValue() interface{}
}

type xdr_string struct {
	Str *string
	Bound uint32
}
func (v *xdr_string) String() string { return fmt.Sprintf("%q", *v.Str) }
func (v *xdr_string) GetByteSlice() []byte { return ([]byte)(*v.Str) }
func (v *xdr_string) XdrBound() uint32 { return v.Bound }
func (v *xdr_string) SetByteSlice(bs []byte) {
	if uintptr(len(bs)) > uintptr(v.Bound) {
		xdrPanic("Cannot store %d bytes in string<%d>", len(bs), v.Bound)
	}
	*v.Str = string(bs)
}
func (v *xdr_string) XdrPointer() interface{} { return v.Str }
func (v *xdr_string) XdrValue() interface{} { return *v.Str }

type xdr_vec_opaque struct {
	Bytes *[]byte
	Bound uint32
}
func (v *xdr_vec_opaque) String() string { return fmt.Sprintf("%v", *v.Bytes) }
func (v *xdr_vec_opaque) GetByteSlice() []byte { return *v.Bytes }
func (v *xdr_vec_opaque) XdrBound() uint32 { return v.Bound }
func (v *xdr_vec_opaque) SetByteSlice(bs []byte) {
	if uintptr(len(bs)) > uintptr(v.Bound) {
		xdrPanic("Cannot store %d bytes in string<%d>", len(bs), v.Bound)
	}
	*v.Bytes = bs
}
func (v *xdr_vec_opaque) XdrPointer() interface{} { return v.Bytes }
func (v *xdr_vec_opaque) XdrValue() interface{} { return *v.Bytes }

type xdrtype_array_opaque []byte
func (v *xdrtype_array_opaque) GetByteSlice() []byte { return ([]byte)(*v) }

// end boilerplate` + "\n"
