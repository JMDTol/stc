// -*-Go-*-

// Don't edit header.go, edit header.go.in.  header.go is
// autogenerated from header.go.in by uncommenting the line marked
// UNCOMMENT.  (The comment makes is easier to edit the contents of
// the header string as go source code in a syntax-aware editor.)

package main

//UNCOMMENT:var header string = `
// begin boilerplate

import "fmt"
import "math"

// The interface through which values are serialized, printed, etc.
type XDR interface {
	Marshal(name string, ptr interface{})

	// This method should just be fmt.Sprintf for XDRs that use name.
	// Those that don't use name can use a trivial method returning ""
	Sprintf(string, ...interface{}) string
}

// The error thrown by marshaling functions when data has bad value.
type XdrError string
func (v XdrError) Error() string { return string(v) }
func xdrPanic(s string, args ...interface{}) {
	panic(XdrError(fmt.Sprintf(s, args...)))
}

// RFC4506 defines bool as equivalent to an enum with values all-caps
// TRUE and FALSE.  For convenience, we represent and XDR bool as a Go
// bool instead, and so define these constants in case they show up in
// union cases.
const (
	TRUE = true
	FALSE = false
)

// All quantities that should be serialized as 32-bit numbers
// (including bools, enums, union discriminants, the bit saying
// whether or not a pointer is NULL, floats, and vector lenghts) are
// passed to the XDR.Marshal function as a pointer to a defined type
// implementing the XdrNum32 interface.  The one exception is string<>
// and opaque<>, for which it is the job of XDR.Marshal to serialize
// the 32-bit length.
type XdrNum32 interface {
	GetU32() uint32
	SetU32(uint32)
	XdrPointer() interface{}
	XdrValue() interface{}
}

// All 64-bit numbers (hyper, unsigned hyper, and double) are passed
// to XDR.Marshal as a pointer to a defined type implementing
// XdrNum64.
type XdrNum64 interface {
	GetU64() uint64
	SetU64(uint64)
	XdrPointer() interface{}
	XdrValue() interface{}
}

// opaque[] are passed to XDR.Marshal as quantities implementing the
// XdrBytes interface.
type XdrBytes interface {
	GetByteSlice() []byte
	XdrValue() interface{}
}

// opaque<> and string<> are passed to XDR.Marshal as quantities
// implementing XdrVarBytes.  Since XdrVarBytes is a superset of
// XdrBytes, Marshal functions that want to distinguish between
// opaque<> and opaque[] should first try a type assertion for
// XdrVarBytes (to check for opaque<>) and then if that fails try
// XdrBytes (to check for opaque[]).
type XdrVarBytes interface {
	XdrBytes
	XdrBound() uint32
	SetByteSlice([]byte)
	XdrPointer() interface{}
}

// Any struct, union, pointer, or variable-length array type (except
// opaque<> and string<>) is passed to XDR.Marshal as a pointer
// implementing the XdrAggregate interface.  It is the responsibility
// of the XDR.Marshal function to call the XdrMarshal method so as to
// recurse into the data structure.  Placing reponsibility on
// XDR.Marshal for recursing allows a custom XDR to prune the
// serialization at particular types (e.g., for pretty-printing a
// partucular struct in a non-standard way).
type XdrAggregate interface {
	XdrMarshal(XDR, string)
}

// Any pointer type is passed to XDR.Marshal as a struct implementing
// the XdrPtr interface.  Note this is a superset of XdrAggregate, so
// when Marshal function that does nothing and calls XdrMarshal, it
// will then get called twice, once with an XdrNum32 (to marshal the
// non-NULL bit) and then again with the underlying value if the
// pointer is non-nil.  An XDR.Marshal function that wants to special
// case pointers get get the present bit from the GetPresent and
// SetPresent methods, then bypass marshaling of the bit by calling
// XdrMarshalValue instead of XdrMarshal.
type XdrPtr interface {
	XdrAggregate
	GetPresent() bool
	SetPresent(bool)
	XdrMarshalValue(XDR, string)
	XdrPointer() interface{}
	XdrValue() interface{}
}

// Any vector type is passed as a pointer to a user-defined alias
// around a slice that implements the XdrVec interface.  XdrVec is a
// superset of XdrAggregate, so calling XdrMarshal will recurse to
// call XDR.Marshal first on the size (of type XdrSize), then on each
// element of the slice.  An XDR.Marshal function can manually marshal
// the size and then call XdrMarshalN to marshal n vector elements.
// (It is advisable *not* to call SetVecLen before calling
// XdrMarshalN, as XdrMarshalN gradually grows the slice size to N so
// as to avoid exhausting memory if bad input contains a huge size.)
type XdrVec interface {
	XdrAggregate
	XdrBound() uint32
	GetVecLen() uint32
	SetVecLen(uint32)
	XdrMarshalN(XDR, string, uint32)
	XdrPointer() interface{}
	XdrValue() interface{}
}

type XdrVoid = struct{}

type XdrBool bool
func (v *XdrBool) String() string { return fmt.Sprintf("%v", v.XdrValue()) }
func (v *XdrBool) GetU32() uint32 { if *v { return 1 }; return 0 }
func (v *XdrBool) SetU32(nv uint32) {
	switch nv {
	case 0:
		*v = false
	case 1:
		*v = true
	}
	xdrPanic("bool must be 0 or 1")
}
func (v *XdrBool) XdrPointer() interface{} { return (*bool)(v) }
func (v *XdrBool) XdrValue() interface{} { return bool(*v) }
func XDR_bool(x XDR, name string, v *bool) { x.Marshal(name, (*XdrBool)(v)) }

type XdrInt32 int32
func (v *XdrInt32) String() string { return fmt.Sprintf("%v", v.XdrValue()) }
func (v *XdrInt32) GetU32() uint32 { return uint32(*v) }
func (v *XdrInt32) SetU32(nv uint32) { *v = XdrInt32(nv) }
func (v *XdrInt32) XdrPointer() interface{} { return (*int32)(v) }
func (v *XdrInt32) XdrValue() interface{} { return int32(*v) }
func XDR_int32(x XDR, name string, v *int32) {
	x.Marshal(name, (*XdrInt32)(v))
}

type XdrUint32 uint32
func (v *XdrUint32) String() string { return fmt.Sprintf("%v", v.XdrValue()) }
func (v *XdrUint32) GetU32() uint32 { return uint32(*v) }
func (v *XdrUint32) SetU32(nv uint32) { *v = XdrUint32(nv) }
func (v *XdrUint32) XdrPointer() interface{} { return (*uint32)(v) }
func (v *XdrUint32) XdrValue() interface{} { return uint32(*v) }
func XDR_uint32(x XDR, name string, v *uint32) {
	x.Marshal(name, (*XdrUint32)(v))
}

type XdrFloat32 float32
func (v *XdrFloat32) String() string { return fmt.Sprintf("%v", v.XdrValue()) }
func (v *XdrFloat32) GetU32() uint32 { return math.Float32bits(float32(*v)) }
func (v *XdrFloat32) SetU32(nv uint32) {
	*v = XdrFloat32(math.Float32frombits(nv))
}
func (v *XdrFloat32) XdrPointer() interface{} { return (*float32)(v) }
func (v *XdrFloat32) XdrValue() interface{} { return float32(*v) }
func XDR_float32(x XDR, name string, v *float32) {
	x.Marshal(name, (*XdrFloat32)(v))
}

type XdrSize struct {
	size uint32
	bound uint32
}
func (v *XdrSize) String() string { return fmt.Sprintf("%v", v.size) }
func (v *XdrSize) GetU32() uint32 { return v.size }
func (v *XdrSize) SetU32(nv uint32) {
	if nv > v.bound {
		xdrPanic("size %d greater than bound %d", nv, v.bound)
	} else if int(nv) < 0 {
		xdrPanic("size %d greater than max slice len", nv)
	}
	v.size = nv
}
func (v *XdrSize) XdrPointer() interface{} { return &v.size }
func (v *XdrSize) XdrValue() interface{} { return v.size }
func (v *XdrSize) XdrBound() uint32 { return v.bound }

type XdrInt64 int64
func (v *XdrInt64) String() string { return fmt.Sprintf("%v", v.XdrValue()) }
func (v *XdrInt64) GetU64() uint64 { return uint64(*v) }
func (v *XdrInt64) SetU64(nv uint64) { *v = XdrInt64(nv) }
func (v *XdrInt64) XdrPointer() interface{} { return (*int64)(v) }
func (v *XdrInt64) XdrValue() interface{} { return int64(*v) }
func XDR_int64(x XDR, name string, v *int64) { x.Marshal(name, (*XdrInt64)(v)) }

type XdrUint64 uint64
func (v *XdrUint64) String() string { return fmt.Sprintf("%v", v.XdrValue()) }
func (v *XdrUint64) GetU64() uint64 { return uint64(*v) }
func (v *XdrUint64) SetU64(nv uint64) { *v = XdrUint64(nv) }
func (v *XdrUint64) XdrPointer() interface{} { return (*uint64)(v) }
func (v *XdrUint64) XdrValue() interface{} { return uint64(*v) }
func XDR_uint64(x XDR, name string, v *uint64) {
	x.Marshal(name, (*XdrUint64)(v))
}

type XdrFloat64 float64
func (v *XdrFloat64) String() string { return fmt.Sprintf("%v", v.XdrValue()) }
func (v *XdrFloat64) GetU64() uint64 { return math.Float64bits(float64(*v)) }
func (v *XdrFloat64) SetU64(nv uint64) {
	*v = XdrFloat64(math.Float64frombits(nv))
}
func (v *XdrFloat64) XdrPointer() interface{} { return (*float64)(v) }
func (v *XdrFloat64) XdrValue() interface{} { return float64(*v) }
func XDR_float64(x XDR, name string, v *float64) {
	x.Marshal(name, (*XdrFloat64)(v))
}

type XdrString struct {
	Str *string
	Bound uint32
}
func (v *XdrString) String() string { return fmt.Sprintf("%q", *v.Str) }
func (v *XdrString) XdrBound() uint32 { return v.Bound }
func (v *XdrString) GetString() string { return *v.Str }
func (v *XdrString) SetString(s string) {
	if uint(len(s)) > uint(v.Bound) {
		xdrPanic("Cannot store %d bytes in string<%d>", len(s), v.Bound)
	}
	*v.Str = s
}
func (v *XdrString) GetByteSlice() []byte { return ([]byte)(*v.Str) }
func (v *XdrString) SetByteSlice(bs []byte) {
	if uint(len(bs)) > uint(v.Bound) {
		xdrPanic("Cannot store %d bytes in string<%d>", len(bs), v.Bound)
	}
	*v.Str = string(bs)
}
func (v *XdrString) XdrPointer() interface{} { return v.Str }
func (v *XdrString) XdrValue() interface{} { return *v.Str }

type XdrVecOpaque struct {
	Bytes *[]byte
	Bound uint32
}
func (v *XdrVecOpaque) String() string {
	return fmt.Sprintf("%x", []byte(*v.Bytes))
}
func (v *XdrVecOpaque) GetByteSlice() []byte { return *v.Bytes }
func (v *XdrVecOpaque) XdrBound() uint32 { return v.Bound }
func (v *XdrVecOpaque) SetByteSlice(bs []byte) {
	if uintptr(len(bs)) > uintptr(v.Bound) {
		xdrPanic("Cannot store %d bytes in string<%d>", len(bs), v.Bound)
	}
	*v.Bytes = bs
}
func (v *XdrVecOpaque) XdrPointer() interface{} { return v.Bytes }
func (v *XdrVecOpaque) XdrValue() interface{} { return *v.Bytes }

type XdrArrayOpaque []byte
func (v XdrArrayOpaque) GetByteSlice() []byte { return ([]byte)(v) }
func (v XdrArrayOpaque) XdrValue() interface{} { return v }
func (v XdrArrayOpaque) String() string { return fmt.Sprintf("%x", []byte(v)) }

// end boilerplate
//UNCOMMENT:`
